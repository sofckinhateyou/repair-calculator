# main.py
import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
from database import DB_PATH
from add_item_dialog import AddItemDialog
from tkinter import simpledialog

class RepairCalculatorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞")
        self.root.geometry("1200x700")

        self.conn = sqlite3.connect(DB_PATH)
        self.cursor = self.conn.cursor()

        self.work_types = []
        self.materials = []
        self.room_data = []
        self.executors = []

        self.setup_ui()

    def setup_ui(self):
        top_frame = ttk.Frame(self.root)
        top_frame.pack(pady=10, fill="x")

        ttk.Label(top_frame, text="–ü–æ–º–µ—â–µ–Ω–∏–µ:", font=("Arial", 12)).grid(row=0, column=0, padx=10, pady=5, sticky="w")
        self.room_combo = ttk.Combobox(top_frame, state="readonly", width=30)
        self.room_combo.grid(row=0, column=1, padx=10, pady=5, sticky="ew")

        self.load_rooms()

        # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"
        add_btn = ttk.Button(top_frame, text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", command=self.add_item)
        add_btn.grid(row=0, column=2, padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"
        delete_btn = ttk.Button(top_frame, text="–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", command=self.delete_item)
        delete_btn.grid(row=0, column=4, padx=10, pady=5)

        # –°–æ—Ö—Ä –≤—Å–µ
        save_btn = ttk.Button(top_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç", command=self.save_estimate)
        save_btn.grid(row=0, column=3, padx=10, pady=5)

        #–£–¥–∞–ª–∏—Ç—å –≤—Å–µ
        clear_btn = ttk.Button(top_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", command=self.clear_all)
        clear_btn.grid(row=0, column=5, padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã"
        view_btn = ttk.Button(top_frame, text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–º–µ—Ç—ã", command=self.view_saved_estimates)
        view_btn.grid(row=0, column=5, padx=10, pady=5)

        #–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        ttk.Label(top_frame, text="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:", font=("Arial", 10)).grid(row=0, column=6, padx=10, pady=5, sticky="w")
        self.executor_combo = ttk.Combobox(top_frame, state="readonly", width=25)
        self.executor_combo.grid(row=0, column=7, padx=10, pady=5, sticky="ew")
        # –ó–∞–≥—Ä—É–∑–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        self.load_executors()

        # –¢–∞–±–ª–∏—Ü–∞
        self.tree = ttk.Treeview(self.root, columns=("–†–∞–±–æ—Ç–∞", "–ú–∞—Ç–µ—Ä–∏–∞–ª", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞ –∑–∞ –µ–¥.", "–ò—Ç–æ–≥–æ"), show="headings")
        for col in self.tree["columns"]:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=120)
        self.tree.pack(pady=10, fill="both", expand=True)

        # –ò—Ç–æ–≥
        self.total_label = ttk.Label(self.root, text="–ò—Ç–æ–≥–æ: 0 —Ä—É–±", font=("Arial", 14, "bold"))
        self.total_label.pack(pady=10)

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        self.room_combo.bind("<<ComboboxSelected>>", lambda e: self.update_estimate())

        # üü¢ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
        self.load_work_types()
        self.load_materials()
        self.load_work_materials()

        # üü¢ –¢–æ–ª—å–∫–æ –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å–æ–∑–¥–∞—ë–º –¥–∏–∞–ª–æ–≥
        self.add_item_dialog = AddItemDialog(self.root, self.work_types, self.materials, self.work_materials)

    def load_rooms(self):
        self.cursor.execute("SELECT id, room_type, area_m2 FROM rooms")
        self.room_data = self.cursor.fetchall()

        print("üîç –ü–æ–º–µ—â–µ–Ω–∏—è:")
        for r in self.room_data:
            print(f"ID: {r[0]}, –¢–∏–ø: {r[1]}, –ü–ª–æ—â–∞–¥—å: {r[2]} –º¬≤")

        values = [f"{r[1]} ({r[2]} –º¬≤)" for r in self.room_data]
        self.room_combo['values'] = values
        if self.room_data:
            self.room_combo.current(0)

            # üü¢ –ó–∞–ø—É—Å–∫–∞–µ–º update_estimate() –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è UI
            self.root.after(100, self.update_estimate)

    def load_work_types(self):
        self.cursor.execute("SELECT id, name, unit, price_per_unit FROM work_types")
        self.work_types = self.cursor.fetchall()

        print("üîç –†–∞–±–æ—Ç—ã:")
        for w in self.work_types:
            print(f"ID: {w[0]}, {w[1]} ({w[2]}, {w[3]} —Ä—É–±)")

    def load_materials(self):
        self.cursor.execute("SELECT id, name, unit, price_per_unit FROM materials")
        self.materials = self.cursor.fetchall()

        print("üîç –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:")
        for m in self.materials:
            print(f"ID: {m[0]}, {m[1]} ({m[2]}, {m[3]} —Ä—É–±)")

    def load_work_materials(self):
        self.cursor.execute("SELECT work_type_id, material_id FROM work_materials")
        raw_data = self.cursor.fetchall()

        print("üîç –°–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª:")
        self.work_materials = []  # üü¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ü–ò–°–ö–ê –ü–ï–†–ï–î –¶–ò–ö–õ–û–ú

        for work_id, mat_id in raw_data:
            # –ù–∞–π—Ç–∏ –∏–º—è —Ä–∞–±–æ—Ç—ã
            work_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
            for w in self.work_types:
                if w[0] == work_id:
                    work_name = w[1]
                    break

            # –ù–∞–π—Ç–∏ –∏–º—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            mat_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"
            for m in self.materials:
                if m[0] == mat_id:
                    mat_name = m[1]
                    break

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            print(f"–†–∞–±–æ—Ç–∞: {work_name} ‚Üí –ú–∞—Ç–µ—Ä–∏–∞–ª: {mat_name}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if work_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞" and mat_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª":
                self.work_materials.append((work_id, mat_id))
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–≤—è–∑—å: work_id={work_id}, mat_id={mat_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π: {len(self.work_materials)}")

    def add_item(self):
        dialog = AddItemDialog(self.root, self.work_types, self.materials, self.work_materials)
        result = dialog.show()

        if result:
            self.tree.insert("", "end", values=(
                result["work_name"],
                result["material_name"] or "‚Äî",
                result["quantity"],
                result["price_per_unit"],
                result["total_price"]
            ))
            self.update_total()

    def delete_item(self):
        selected_items = self.tree.selection()
        if not selected_items:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é?"):
            for item in selected_items:
                self.tree.delete(item)
            self.update_total()

    def clear_all(self):
        if messagebox.askyesno("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫?"):
            for row in self.tree.get_children():
                self.tree.delete(row)
            self.update_total()

    def update_estimate(self):
        selected_index = self.room_combo.current()
        if selected_index == -1:
            return

        room_id = self.room_data[selected_index][0]

        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for row in self.tree.get_children():
            self.tree.delete(row)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ë–î
        self.cursor.execute('''
            SELECT w.name, m.name, j.quantity, w.price_per_unit, j.total_price
            FROM job_items j
            JOIN work_types w ON j.work_type_id = w.id
            LEFT JOIN materials m ON j.material_id = m.id
            WHERE j.room_id = ?
        ''', (room_id,))
        
        rows = self.cursor.fetchall()

        total = 0
        for row in rows:
            work_name, mat_name, qty, price, total_price = row
            mat_name = mat_name or "‚Äî"
            self.tree.insert("", "end", values=(work_name, mat_name, qty, price, total_price))
            total += total_price

        self.total_label.config(text=f"–ò—Ç–æ–≥–æ: {total:.2f} —Ä—É–±")

    def update_total(self):
        total = 0
        for row in self.tree.get_children():
            values = self.tree.item(row, "values")
            total += float(values[4])

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        selected_executor = self.executor_combo.get()
        executor_id = None
        multiplier = 1.0

        if selected_executor:
            for e in self.executors:
                if e[1] == selected_executor:
                    executor_id = e[0]
                    rating = e[2]  # üü¢ –≠—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥! –ò–Ω–¥–µ–∫—Å 2, –∞ –Ω–µ 3
                    multiplier = self.get_multiplier(rating)
                    break

        final_total = total * multiplier

        self.total_label.config(text=f"–ò—Ç–æ–≥–æ: {final_total:.2f} —Ä—É–± (–º–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier:.2f})")
        
    def save_estimate(self):
        selected_index = self.room_combo.current()
        if selected_index == -1:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–º–µ—â–µ–Ω–∏–µ.")
            return

        room_id = self.room_data[selected_index][0]
        room_name = self.room_combo.get().split(" ")[0]

        name = simpledialog.askstring("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–º–µ—Ç—É", f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–º–µ—Ç—ã:", initialvalue=f"–†–µ–º–æ–Ω—Ç {room_name} {self.root.winfo_toplevel().winfo_toplevel().title()}")
        if not name:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥
        total = 0
        items = []

        for row in self.tree.get_children():
            values = self.tree.item(row, "values")
            work_name = values[0]
            material_name = values[1]
            qty = float(values[2])
            price_per_unit = float(values[3])
            total_price = float(values[4])

            work_id = None
            for w in self.work_types:
                if w[1] == work_name:
                    work_id = w[0]
                    break

            mat_id = None
            if material_name != "‚Äî":
                for m in self.materials:
                    if m[1] == material_name:
                        mat_id = m[0]
                        break

            items.append((work_id, mat_id, qty, price_per_unit, total_price))
            total += total_price

        # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        selected_executor = self.executor_combo.get()
        executor_id = None
        multiplier = 1.0

        if selected_executor:
            for e in self.executors:
                if e[1] == selected_executor:
                    executor_id = e[0]
                    multiplier = self.get_multiplier(e[3])
                    break

        final_total = total * multiplier

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        try:
            self.cursor.execute(
                "INSERT INTO estimates (name, room_id, total_price, executor_id) VALUES (?, ?, ?, ?)",
                (name, room_id, final_total, executor_id)
            )
            estimate_id = self.cursor.lastrowid

            for item in items:
                work_id, mat_id, qty, price_per_unit, total_price = item
                self.cursor.execute(
                    "INSERT INTO estimate_items (estimate_id, work_type_id, material_id, quantity, price_per_unit, total_price) VALUES (?, ?, ?, ?, ?, ?)",
                    (estimate_id, work_id, mat_id, qty, price_per_unit, total_price)
                )

            self.conn.commit()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–º–µ—Ç–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–ò—Ç–æ–≥–æ: {final_total:.2f} —Ä—É–± (–º–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier:.2f})")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–º–µ—Ç—É: {e}")
    def view_saved_estimates(self):
        # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ
        view_window = tk.Toplevel(self.root)
        view_window.title("–ò—Å—Ç–æ—Ä–∏—è —Å–º–µ—Ç")
        view_window.geometry("800x500")
        view_window.resizable(False, False)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        view_window.transient(self.root)
        view_window.grab_set()

        # –§—Ä–µ–π–º
        frame = ttk.Frame(view_window, padding="20")
        frame.pack(fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(frame, text="–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–º–µ—Ç—ã", font=("Arial", 14, "bold")).pack(pady=10)

        # –¢–∞–±–ª–∏—Ü–∞
        columns = ("ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ü–æ–º–µ—â–µ–Ω–∏–µ", "–ò—Ç–æ–≥–æ", "–î–∞—Ç–∞")
        tree = ttk.Treeview(frame, columns=columns, show="headings", height=15)
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=100 if col != "–ù–∞–∑–≤–∞–Ω–∏–µ" else 200)
        tree.pack(pady=10, fill="both", expand=True)

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(frame, orient="vertical", command=tree.yview)
        scrollbar.pack(side="right", fill="y")
        tree.configure(yscrollcommand=scrollbar.set)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        try:
            self.cursor.execute('''
                SELECT e.id, e.name, r.room_type, e.total_price, e.created_at
                FROM estimates e
                JOIN rooms r ON e.room_id = r.id
                ORDER BY e.created_at DESC
            ''')
            rows = self.cursor.fetchall()

            for row in rows:
                tree.insert("", "end", values=row)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–º–µ—Ç—ã: {e}")
            return

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(frame)
        button_frame.pack(pady=10)

        def on_select():
            selected = tree.selection()
            if not selected:
                messagebox.showwarning("–í—ã–±–µ—Ä–∏—Ç–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
                return
            item = tree.item(selected[0])
            estimate_id = item["values"][0]

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            self.show_estimate_details(estimate_id)

        def on_delete():
            selected = tree.selection()
            if not selected:
                messagebox.showwarning("–í—ã–±–µ—Ä–∏—Ç–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
            item = tree.item(selected[0])
            estimate_id = item["values"][0]
            name = item["values"][1]

            if messagebox.askyesno("–£–¥–∞–ª–∏—Ç—å", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–º–µ—Ç—É '{name}'?"):
                try:
                    self.cursor.execute("DELETE FROM estimate_items WHERE estimate_id = ?", (estimate_id,))
                    self.cursor.execute("DELETE FROM estimates WHERE id = ?", (estimate_id,))
                    self.conn.commit()
                    tree.delete(selected[0])
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–º–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {e}")

        # –ö–Ω–æ–ø–∫–∏
        ttk.Button(button_frame, text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", command=on_select).pack(side="left", padx=5)
        ttk.Button(button_frame, text="–£–¥–∞–ª–∏—Ç—å", command=on_delete).pack(side="right", padx=5)

        # –°–≤—è–∑—å Enter/Escape
        view_window.bind("<Return>", lambda e: on_select())
        view_window.bind("<Escape>", lambda e: view_window.destroy())

    def show_estimate_details(self, estimate_id):
        detail_window = tk.Toplevel(self.root)
        detail_window.title(f"–î–µ—Ç–∞–ª–∏ —Å–º–µ—Ç—ã #{estimate_id}")
        detail_window.geometry("700x500")
        detail_window.resizable(False, False)

        detail_window.transient(self.root)
        detail_window.grab_set()

        frame = ttk.Frame(detail_window, padding="20")
        frame.pack(fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(frame, text=f"–°–º–µ—Ç–∞ #{estimate_id}", font=("Arial", 14, "bold")).pack(pady=10)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        columns = ("–†–∞–±–æ—Ç–∞", "–ú–∞—Ç–µ—Ä–∏–∞–ª", "–ö–æ–ª-–≤–æ", "–¶–µ–Ω–∞ –∑–∞ –µ–¥.", "–ò—Ç–æ–≥–æ")
        tree = ttk.Treeview(frame, columns=columns, show="headings", height=12)
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=120)
        tree.pack(pady=10, fill="both", expand=True)

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(frame, orient="vertical", command=tree.yview)
        scrollbar.pack(side="right", fill="y")
        tree.configure(yscrollcommand=scrollbar.set)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π
        try:
            self.cursor.execute('''
                SELECT wt.name, m.name, ei.quantity, ei.price_per_unit, ei.total_price
                FROM estimate_items ei
                LEFT JOIN work_types wt ON ei.work_type_id = wt.id
                LEFT JOIN materials m ON ei.material_id = m.id
                WHERE ei.estimate_id = ?
            ''', (estimate_id,))
            rows = self.cursor.fetchall()

            for row in rows:
                work_name = row[0] or "‚Äî"
                mat_name = row[1] or "‚Äî"
                qty = row[2]
                price = row[3]
                total = row[4]
                tree.insert("", "end", values=(work_name, mat_name, qty, price, total))

            # –ò—Ç–æ–≥
            total_sum = sum(row[4] for row in rows)
            ttk.Label(frame, text=f"–ò—Ç–æ–≥–æ: {total_sum:.2f} —Ä—É–±", font=("Arial", 12, "bold")).pack(pady=10)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
            return

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ttk.Button(frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=detail_window.destroy).pack(pady=10)

        # Bind –∫–ª–∞–≤–∏—à
        detail_window.bind("<Escape>", lambda e: detail_window.destroy())

    def load_executors(self):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º ID, –∏–º—è –∏ —Ä–µ–π—Ç–∏–Ω–≥
            self.cursor.execute("""
                SELECT id, name, rating 
                FROM executors
                ORDER BY rating DESC
            """)
            executors = self.cursor.fetchall()

            print("üîç –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:")
            for e in executors:
                print(f"ID: {e[0]}, {e[1]} (—Ä–µ–π—Ç–∏–Ω–≥: {e[2]})")

            values = [e[1] for e in executors]
            self.executor_combo['values'] = values
            if values:
                self.executor_combo.current(0)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ: (id, name, rating)
            self.executors = executors

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            self.executor_combo.bind("<<ComboboxSelected>>", lambda e: self.update_total())
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}")

    def get_multiplier(self, rating):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"""
        # –ü—Ä–∏–º–µ—Ä: 4.8 ‚Üí 1.1, 4.6 ‚Üí 1.05, 4.0 ‚Üí 1.0
        if rating >= 4.8:
            return 1.1
        elif rating >= 4.6:
            return 1.05
        elif rating >= 4.4:
            return 1.02
        else:
            return 1.0
    def run(self):
        self.root.mainloop()


if __name__ == "__main__":
    app = RepairCalculatorApp(tk.Tk())
    app.run()